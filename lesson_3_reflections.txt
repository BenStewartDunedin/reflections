When would you want to use a remote repository rather than keeping all your
 work local?
When you are colaborating with other people.
When you are submitting work to a build or test server.
For software reviews.
Why might you want to always pull changes manually rather than having Git
 automatically stay up-to-date with your remote repository?
You might be working on a change locally that you don't want to push to
the remote repository as it is not complete.
You might be working in the same area of code as another developer, if they
commit to the remote repository you don't want the commit affecting your work.
Describe the differences between forks, clones, and branches. When would you
 use one instead of another?
You use fork to clone a repository that you don't have write access to.
You use clone to duplicate a repository that you may want to commit to later.
You use branch to work on a new feature or bug fix within your local
repository.
What is the benefit of having a copy of the last known state of the remote
 stored locally?
It allows to to review and merge locally, this will need to happen eventually
when you sync with the remote.
How would you collaborate without using Git or GitHub? What would be easier,
 and what would be harder?
You could pass email patch files around. It may be easier to develop on a
computer that is not connected to the internet.
It would be more difficult to keep the changes in sync, if there were many 
contributors you would need to be very disiplined to avoid chaos.
When would you want to make changes in a separate branch rather than directly
 in master?
Say you wanted to work on a new feature leave the master functioning
What benefits does each approach have?
A branch can be abandoned if the change is not feasible.
If people are working on different features they can be merged systematically

